
.. _mqtt:

========
MQTT协议
========

------------------------
MQTT轻量发布订阅消息协议
------------------------

概览
----

MQTT是一个轻量的发布订阅模式的消息传输协议，专门针对低带宽和不稳定网络环境的物联网应用设计。

MQTT官网: http://mqtt.org

MQTT V3.1.1协议规范: http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html

特点
----

1. 开放消息协议，简单易实现

2. 发布订阅模式，一对多消息发布

3. 基于TCP/IP网络连接

4. 1字节固定报头，2字节心跳报文，报文结构紧凑

5. 消息QoS支持，可靠传输保证

应用
----

MQTT协议广泛应用于物联网、移动互联网、智能硬件、车联网、能源勘探等领域。

1. 物联网M2M通信

2. Android消息推送

3. 移动即时消息

4. 智能硬件应用

5. 车联网

6. 卫星链路能源勘探

7. 远程医疗、教育

---------------------------
MQTT基于主题(Topic)消息路由
---------------------------

MQTT协议基于主题(Topic)进行消息路由，主题(Topic)类似URL路径，例如::

    chat/room/1

    sensor/10/temperature

    sensor/+/temperature

    $SYS/broker/metrics/packets/received

    $SYS/broker/metrics/#

主题(Topic)通过'/'分割层级，支持'+', '#'通配符::

    '+': 表示通配一个层级，例如a/+，匹配a/x, a/y
    '#': 表示通配多个层级，例如a/#，匹配a/x, a/b/c/d

订阅者与发布者之间通过主题(Topic)匹配方式路由消息。

.. NOTE:: 订阅者可以订阅含通配符主题过滤消息，但发布者不允许向含通配符主题发布消息。

-----------------------
MQTT V3.1.1协议报文格式
-----------------------

报文结构
--------

+--------------------------------------------------+
| 固定报头(Fixed header)                           |
+--------------------------------------------------+
| 可变报头(Variable header)                        |
+--------------------------------------------------+
| 报文有效载荷(Payload)                            |
+--------------------------------------------------+

固定报头
--------

+----------+-----+-----+-----+-----+-----+-----+-----+-----+
| Bit      |  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0  |
+----------+-----------------------+-----+-----------+-----+
| byte1    |   MQTT Packet type    | Dup |    QoS    | Ret |
+----------+-----------------------------------------------+
| byte2... |   Remaining Length                            |
+----------+-----------------------------------------------+

报文类型
--------

+-------------+---------+----------------------+
| 类型名称    | 类型值  | 报文说明             |
+-------------+---------+----------------------+
| CONNECT     | 1       | 发起连接             |
+-------------+---------+----------------------+
| CONNACK     | 2       | 连接回执             |
+-------------+---------+----------------------+
| PUBLISH     | 3       | 发布消息             |
+-------------+---------+----------------------+
| PUBACK      | 4       | 发布回执             |
+-------------+---------+----------------------+
| PUBREC      | 5       | QoS2消息回执         |
+-------------+---------+----------------------+
| PUBREL      | 6       | QoS2消息释放         |
+-------------+---------+----------------------+
| PUBCOMP     | 7       | QoS2消息完成         |
+-------------+---------+----------------------+
| SUBSCRIBE   | 8       | 订阅主题(Topic)      |
+-------------+---------+----------------------+
| SUBACK      | 9       | 订阅回执             |
+-------------+---------+----------------------+
| UNSUBSCRIBE | 10      | 取消订阅             |
+-------------+---------+----------------------+
| UNSUBACK    | 11      | 取消订阅回执         |
+-------------+---------+----------------------+
| PINGREQ     | 12      | PING请求             |
+-------------+---------+----------------------+
| PINGRESP    | 13      | PING响应             |
+-------------+---------+----------------------+
| DISCONNECT  | 14      | 断开连接             |
+-------------+---------+----------------------+

PUBLISH发布消息
---------------

PUBLISH报文承载客户端服务器双向的发布消息。 PUBACK报文用于接收端确认QoS1报文，PUBREC/PUBREL/PUBCOMP报文用于QoS2消息流程。

PINGREQ/PINGRESP心跳
--------------------

客户端在无报文发送时，按保活周期(KeepAlive)定时向服务端发送PINGREQ心跳报文，服务端响应PINGRESP报文。PINGREQ/PINGRESP报文均2个字节。

---------------
MQTT发布消息QoS
---------------

MQTT发布消息QoS保证不是端到端的，是客户端与服务器之间的。订阅者收到MQTT消息的QoS级别，最终取决于发布消息的QoS和主题订阅的QoS。

+---------------+---------------+---------------+
| 发布消息的QoS | 主题订阅的QoS | 接收消息的QoS |
+---------------+---------------+---------------+
|      0        |      0        |      0        |
+---------------+---------------+---------------+
|      0        |      1        |      0        |
+---------------+---------------+---------------+
|      0        |      2        |      0        |
+---------------+---------------+---------------+
|      1        |      0        |      0        |
+---------------+---------------+---------------+
|      1        |      1        |      1        |
+---------------+---------------+---------------+
|      1        |      2        |      1        |
+---------------+---------------+---------------+
|      2        |      0        |      0        |
+---------------+---------------+---------------+
|      2        |      1        |      1        |
+---------------+---------------+---------------+
|      2        |      2        |      2        |
+---------------+---------------+---------------+

Qos0消息发布订阅
----------------

.. image:: _static/images/qos0_seq.png

Qos1消息发布订阅
----------------

.. image:: _static/images/qos1_seq.png

Qos2消息发布订阅
----------------

.. image:: _static/images/qos2_seq.png

-----------------------
MQTT会话(Clean Session)
-----------------------

Clean Session Flag

Transient Session

Persistent Session

Offline Message


Transient, Persistent Sessions

--------------------------------
MQTT连接保活心跳
--------------------------------

CONNECT报文KeepAlive参数
PINGREQ 2字节心跳报文
XMPP KeepAlive???
KeepAlive and Two Bytes Heartbeat

--------------------------------
MQTT协议-Last Will Message
--------------------------------

Last Will

-------------------------
MQTT协议-Retained Message
-------------------------
Retained Message

--------------------------------
MQTT协议-WebSocket连接
--------------------------------

Binary mode frame over WebSocket

PubSub on Web Browser

Firefox, Safari, Chrome, Opera…

IE Sucks?

Better than Socket.IO?

MQTT Over WebSocket

----------------
MQTT协议客户端库
----------------

TODO: 客户端库table...

CocoaMQTT：Swift语言MQTT客户端库

QMQTT：QT框架MQTT客户端库

按功能介绍

--------------------------------
MQTT与XMPP协议对比
--------------------------------

轻量、简单

路由方式灵活，比如群组聊天

Throughput capacity: less overhead, more lightweight

Binary vs plain text

QoS in place (Fire-and-forget, At-least-once and Exactly-once)

Pub/Sub in place (XMPP requires extension XEP- 0060)

No need for an XML parser

--------------------------------
MQTT应用-Mobile, IoT, M2M…
--------------------------------

Android Push

Mobile Chat(Facebook Messenger)

物联网(IoT, M2M)、智能硬件、车联网...

行业市场(电力、石油、能源…)

